/* UI Elementscan be broadly categorized into several types including:

Structural(Semantic) elements: define the structure of a web page and include elements such as <header>, <footer>, <nav>, <main>, <section>, <article>, and <aside>.

Text-level elements: define text-level content and include elements such as <p>, <h1>, <h2>, <h3>, <h4>, <h5>, <h6>, <a>, <em>, <strong>, <small>, <mark>, <del>, and <ins>.

Media elements: define media content such as images, videos, and audio, and include elements such as <img>, <video>, and <audio>.

Form elements: define form controls for user input and include elements such as <form>, <input>, <select>, <textarea>, <button>, <datalist>, <output>, and <label>.

List elements: define lists of content and include elements such as <ul>, <ol>, and <li>.

Table elements: define tabular data and include elements such as <table>, <thead>, <tbody>, <tfoot>, <tr>, <th>, and <td>.

Display type: elements that define the display type of content such as block-level elements and inline elements.
Block-level elements: These elements create a new block formatting context and occupy the full width available, automatically creating a new line before and after the element. Examples include <div>, <h1>, <p>, <ul>, <ol>, <table>, <form>, <header>, <footer>, etc.

Inline elements: These elements only take up as much width as necessary and do not create a new line before or after the element. Examples include <span>, <a>, <img>, <em>, <strong>, <small>, etc.

Interactivity: elements that provide interactive features such as buttons, checkboxes, radio buttons, and forms.

Phrasing content: elements that define phrasing content and the way it is rendered, such as <em>, <strong>, <small>, etc.

Metadata: elements that provide metadata about the document, such as <meta>, <title>, <link>, etc.
*/
//ClassesPrefix
$appPrefix: '.at';

//Root variable Prefix
$varPrefix: '--at';

html {
	scroll-behavior: var(#{$varPrefix}-scr-beh, initial);
}

/* Content group */
#{$appPrefix} {
	&-row {
		* {
			box-sizing: var(#{$varPrefix}-box-szg, border-box);
		}
	}

	/* Text  include typo and color* - HTML Elements*/
	&-txt,
	&-txt * {
		// Font/Typography group
		// TODO? font has many other properties but I think we dont need them all;
		font-size: var(#{$varPrefix}-fnt-sz, initial);
		font-weight: var(#{$varPrefix}-fnt-wt, initial);
		font-family: var(#{$varPrefix}-fnt-fam, initial);
		font-style: var(#{$varPrefix}-fnt-sty, initial);
		text-transform: var(#{$varPrefix}-txt-tf, initial);

		//text-decoration: text-decoration-line text-decoration-color text-decoration-style text-decoration-thickness|initial|inherit; (value options)
		text-decoration: var(#{$varPrefix}-txt-dec, initial);

		line-height: var(#{$varPrefix}-ln-h, initial);
		letter-spacing: var(#{$varPrefix}-ltr-sp, initial);

		// color: color|initial|inherit; (value options)
		color: var(#{$varPrefix}-cl, initial);
	}
	&-txt {
		&-al {
			// text-align: left|right|center|justify|initial|inherit; (value options)
			text-align: var(#{$varPrefix}-txt-al, initial);
		}

		// text-indent TODO?
		// text-justify TODO?
		//  text-orientation TODO?
		//  text-overflow TODO?

		&-sdw {
			// text-shadow: h-shadow v-shadow blur-radius color|none|initial|inherit; (value options)
			text-shadow: var(#{$varPrefix}-txt-sdw, initial);
		}
		&-ovf {
			//text-overflow: clip|ellipsis|string|initial|inherit;(value options)
			text-overflow: var(#{$varPrefix}-txt-ovf, initial);
		}
	}

	&-dropcap::first-letter {
		font-size: var(#{$varPrefix}-fnt-sz, initial);
		font-weight: var(#{$varPrefix}-fnt-wt, initial);
		font-family: var(#{$varPrefix}-fnt-fam, initial);
		font-style: var(#{$varPrefix}-fnt-sty, initial);
		text-transform: var(#{$varPrefix}-txt-tf, initial);
		text-decoration: var(#{$varPrefix}-txt-dec, initial);
		line-height: var(#{$varPrefix}-ln-h, initial);
		letter-spacing: var(#{$varPrefix}-ltr-sp, initial);

		// color: color|initial|inherit; (value options)
		color: var(#{$varPrefix}-cl, initial);
		background-color: var(#{$varPrefix}-bg-cl, initial);
		margin: var(#{$varPrefix}-m, initial);
		padding: var(#{$varPrefix}-p, initial);

		// border-color: color|transparent|initial|inherit;(value options)
		border-color: var(#{$varPrefix}-bdr-cl, initial);

		// border-width: medium|thin|thick|length|initial|inherit; (4sides & value options)
		border-width: var(#{$varPrefix}-bdr-w, initial);

		// border-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit; (4sides & value options)
		border-style: var(#{$varPrefix}-bdr-sty, initial);

		// border-radius: 1-4 length|% / 1-4 length|%|initial|inherit; (4sides & value options)
		border-radius: var(#{$varPrefix}-bdr-rad, initial);

		// box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit; (value options)
		box-shadow: var(#{$varPrefix}-box-sdw, initial);

		//added float (must have float left)
		float: left;
	}

	/* Table - UI Elements*/
	&-tbl {
		// caption-side: top|bottom|initial|inherit;
		caption-side: var(#{$varPrefix}-cpt-sd, initial);

		// table-layout: auto|fixed|initial|inherit;
		table-layout: var(#{$varPrefix}-tbl-lyt, initial);
	}

	/* List - UI Elements*/
	&-ls {
		// list-style: list-style-type list-style-position list-style-image|initial|inherit; (value options)
		list-style-position: var(#{$varPrefix}-ls-pos, outside);
		list-style-image: var(#{$varPrefix}-ls-img, none);
		list-style-type: var(#{$varPrefix}-ls-typ, none);

		li {
			&::marker {
				font-size: var(#{$varPrefix}-mkr-sz, initial);
				color: var(#{$varPrefix}-mkr-cl, initial);
			}
		}
	}

	/* Button - UI Elements*/
	&-btn {
		#{$varPrefix}-cur: pointer;
		cursor: var(#{$varPrefix}-cur, initial);
		color: var(#{$varPrefix}-cl, initial);
		background-color: var(#{$varPrefix}-bg-cl, initial);
		font-size: var(#{$varPrefix}-fnt-sz, initial);
		border-color: var(#{$varPrefix}-bdr-cl, initial);
		border-width: var(#{$varPrefix}-bdr-w, initial);
		border-style: var(#{$varPrefix}-bdr-sty, initial);
		padding: var(#{$varPrefix}-p, initial);
		line-height: var(#{$varPrefix}-ln-h, initial);
	}

	/* SVG - UI Elements*/
	&-svg {
		fill: var(#{$varPrefix}-cl);

		text,
		polyline,
		line,
		ellipse,
		circle,
		rect,
		path {
			fill: inherit;
		}

		// svg wrap
		&-wrp {
			#{$varPrefix}-ln-h: 0;
			line-height: var(#{$varPrefix}-ln-h);
			svg {
				width: var(#{$varPrefix}-w, inherit);
				height: var(#{$varPrefix}-h, inherit);
			}
		}
	}

	/* Image - UI Elements*/
	/* Always cover img tag with figure tag */
	&-img {
		#{$varPrefix}-max-w: 100%;
		max-width: var(#{$varPrefix}-max-w);
	}

	/* Video - UI Elements*/
	/* Always cover video tag with figure tag */
	&-vid {
		#{$varPrefix}-max-w: 100%;
		#{$varPrefix}-w: 100%;
		#{$varPrefix}-h: 100%;
		max-width: var(#{$varPrefix}-max-w, initial);
		width: var(#{$varPrefix}-w, initial);
		height: var(#{$varPrefix}-h, initial);

		&-bg {
			#{$varPrefix}-pos: absolute;
			#{$varPrefix}-z-idx: -1;
			#{$varPrefix}-l: 0;
			#{$varPrefix}-t: 0;
			object-fit: cover;
		}
	}

	/* Audio - UI Elements*/
	/* Always cover audio tag with figure tag */
	&-aud {
		#{$varPrefix}-w: 100%;
		#{$varPrefix}-min-w: 300px;
		width: var(#{$varPrefix}-w, initial);
		min-width: var(#{$varPrefix}-min-w, initial);
	}

	/* CSS properties based Class */
	&-acl {
		/* The accent-color property specifies the accent color for user-interface controls like: <input type="checkbox">, <input type="radio">, <input type="range"> and <progress>. */
		// accent-color: auto|color|initial|inherit; (value options)
		accent-color: var(#{$varPrefix}-acl, initial);
	}

	//animation: name duration timing-function delay iteration-count direction fill-mode play-state;
	// Animation is handled by transform, transition, default animation
	// aspect-ratio TODO?
	// backdrop-filter TODO?
	// backface-visibility TODO?

	&-bg {
		&-cl {
			background-color: var(#{$varPrefix}-bg-cl, initial);
		}

		&-img {
			background-image: var(#{$varPrefix}-bg-img, initial);
			background-position: var(#{$varPrefix}-bg-pos, initial);
			background-size: var(#{$varPrefix}-bg-sz, initial);
			background-repeat: var(#{$varPrefix}-bg-rpt, initial);
			background-origin: var(#{$varPrefix}-bg-org, initial);
			background-attachment: var(#{$varPrefix}-bg-atch, initial);
			background-blend-mode: var(#{$varPrefix}-bg-blend-mode, initial);
		}

		// Video element wrapper
		&-vid {
			#{$varPrefix}-pos: relative;
			#{$varPrefix}-z-idx: 1;
		}
	}

	// block-size TODO?

	/* Border has four different properties to, right, bottom, and left
    wich again have three properties color, style and width.
    Since individual properties color, width and style again support 4 values,
    We are managing all properties from these there values*/
	// TODO? border has many other properties but I think we dont need them all;

	&-bdr {
		// border-color: color|transparent|initial|inherit;(value options)
		border-color: var(#{$varPrefix}-bdr-cl, initial);

		// border-width: medium|thin|thick|length|initial|inherit; (4sides & value options)
		border-width: var(#{$varPrefix}-bdr-w, initial);

		// border-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit; (4sides & value options)
		border-style: var(#{$varPrefix}-bdr-sty, initial);

		&-rad {
			// border-radius: 1-4 length|% / 1-4 length|%|initial|inherit; (4sides & value options)
			border-radius: var(#{$varPrefix}-bdr-rad, initial);
		}
	}

	/* Always cover img tag with figure tag */
	&-msk {
		mask-image: var(#{$varPrefix}-msk-img, initial);
		mask-mode: var(#{$varPrefix}-msk-mode, initial);
		mask-origin: var(#{$varPrefix}-msk-org, initial);
		mask-position: var(#{$varPrefix}-msk-pos, initial);
		mask-repeat: var(#{$varPrefix}-msk-rpt, initial);
		mask-size: var(#{$varPrefix}-msk-sz, initial);
	}

	/*Overlay styles*/

	&-ovl {
		#{$varPrefix}-pos: relative;
		#{$varPrefix}-z-idx: 2;

		&:after {
			content: '';
			#{$varPrefix}-pos: absolute;
			#{$varPrefix}-l: 0;
			#{$varPrefix}-t: 0;
			#{$varPrefix}-w: 100%;
			#{$varPrefix}-h: 100%;
			#{$varPrefix}-z-idx: -1;
			width: var(#{$varPrefix}-w, initial);
			height: var(#{$varPrefix}-h, initial);
			position: var(#{$varPrefix}-pos, initial);
			left: var(#{$varPrefix}-l, initial);
			top: var(#{$varPrefix}-t, initial);
			z-index: var(#{$varPrefix}-z-idx, initial);
			transition: var(#{$varPrefix}-trs, initial);
		}

		&-cl {
			&:after {
				background: var(#{$varPrefix}-ovl, initial);
			}
		}

		&-grd {
			&:after {
				background: var(#{$varPrefix}-ovl), initial;
			}
		}
	}

	/*Position*/
	&-pos {
		// position: static|absolute|fixed|relative|sticky|initial|inherit; (value options)
		position: var(#{$varPrefix}-pos, initial);

		// top: auto|length|initial|inherit;(value options)
		top: var(#{$varPrefix}-t, initial);

		// right: auto|length|initial|inherit;(value options)
		right: var(#{$varPrefix}-r, initial);

		// bottom: auto|length|initial|inherit; (Position group)
		bottom: var(#{$varPrefix}-b, initial);

		// left: auto|length|initial|inherit;(value options)
		left: var(#{$varPrefix}-l, initial);
	}

	// box-decoration-break TODO?
	// box-reflect TODO?

	/*Box related css*/
	&-box {
		&-sdw {
			// box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;(value options)
			box-shadow: var(#{$varPrefix}-box-sdw, initial);
		}

		&-szg {
			// box-sizing: content-box|border-box|initial|inherit;(value options)
			box-sizing: var(#{$varPrefix}-box-szg, initial);
		}
	}

	// break-after,break-before,break-inside TODO?

	/*Caret Color*/
	&-ct {
		&-cl {
			/* Set the color of the cursor in input elements:*/
			// caret-color: auto|color|initial|inherit;(value options)
			caret-color: var(#{$varPrefix}-ct-cl, initial);
		}
	}

	//clear,clip,clip-path TODO?

	/*Color*/
	&-cl {
		// color: color|initial|inherit;(value options)
		color: var(#{$varPrefix}-cl, initial);
	}

	/*Clip Path*/
	&-clp-pth {
		//clip: clip-source|basic-shape|margin-box|border-box|padding-box|content-box|fill-box|stroke-box|view-box|none|initial|inherit;(value options)
		clip-path: var(#{$varPrefix}-clp-pth, initial);
	}

	/*Clear*/
	&-clr {
		//clear: none|left|right|both|initial|inherit; (value options)
		clear: var(#{$varPrefix}-clr, initial);
	}

	// column-count,column-fill,column-gap, column-rule, column-rule-color, column-rule-style, column-rule-width, column-span, column-width, columns TODO?
	// content TODO?
	// counter-increment, counter-reset TODO?
	// content TODO?

	/*Cursor*/
	&-cur {
		// cursor: value;
		cursor: var(#{$varPrefix}-cur, initial);
	}

	/*Direction*/
	&-dir {
		// direction: ltr|rtl|initial|inherit; (value options)
		direction: var(#{$varPrefix}-dir, initial);
	}

	// display handle by at - flex css

	// empty-cells TODO?

	/*Filter*/
	/*Special use in Image*/
	&-fl {
		// filter: none | blur() | brightness() | contrast() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia() | url(); (value options)
		filter: var(#{$varPrefix}-fl, initial);
	}

	// flex related css handled by at - flex css. flex, flex-basis, flex-direction, flex-flow, flex-grow, flex-shrink, flex-wrap

	// float TODO?

	// gap in flex

	// Not using any other grid properties, we use flex from by at-flex css

	// height: auto|length|initial|inherit; handle by min-height

	// hyphens: none|manual|auto|initial|inherit; TODO?

	// image-rendering: auto|smooth|high-quality|crisp-edges|pixelated|initial|inherit; TODO?

	// inline-size: auto|value|initial|inherit; TODO?

	// inset,inset-block,inset-block-end, inset-block-start othere inset properties TODO?

	// isolation: auto|isolate|initial|inherit; TODO?

	// justify-content,justify-items and justify-self used by at - flex css

	// left already used on position group

	// letter-spacing/line-height already used on font/typography group

	// list-style used on ul, ol,li

	// max-block-size TODO?

	/*Margin*/
	&-m {
		// margin: length|auto|initial|inherit; (value options)
		margin: var(#{$varPrefix}-m, initial);

		//  margin-block, margin-block-end, margin-block-start, margin-top all should be handled by margin.

		// mask related on at-mask class
	}

	/*Max Height & Width*/
	&-max {
		&-h {
			// max-height: none|length|initial|inherit; (value options)
			max-height: var(#{$varPrefix}-max-h, initial);
		}

		&-w {
			// max-width: none|length|initial|inherit; (value options)
			max-width: var(#{$varPrefix}-max-w, initial);
		}
	}

	/*Min Height & Width*/
	&-min {
		&-h {
			// min-height: length|initial|inherit; (value options)
			min-height: var(#{$varPrefix}-min-h, initial);
		}

		&-w {
			// min-width: length|initial|inherit; (value options)
			min-width: var(#{$varPrefix}-min-w, initial);
		}
	}

	/*Map*/
	&-map {
		height: 100% !important;
		width: 100% !important;
	}
	/*Progress Bar handle by custom html/css*/

	/*Height*/
	&-h {
		// height: length|initial|inherit; (value options)
		height: var(#{$varPrefix}-h, initial);
	}

	/*Width*/
	&-w {
		// width: length|initial|inherit; (value options)
		width: var(#{$varPrefix}-w, initial);
	}

	//  max-inline-size: 60px; TODO?

	// min-block-size, min-inline-size TODO?

	/*Mix Blens Mode*/
	&-mix-blnd-mode {
		// mix-blend-mode: normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|difference|exclusion|hue|saturation|color|luminosity;(value options)
		mix-blend-mode: var(#{$varPrefix}-mix-blend-mode, initial);
	}

	/*Object Fit*/
	&-obj-fit {
		// object-fit : fill|container|cover|none|scale-down (value options)
		mix-blend-mode: var(#{$varPrefix}-obj-fit, initial);
	}

	// offser,offset-anchor and other offect  TODO?

	/*Opacity*/
	&-opa {
		// opacity: number|initial|inherit; (value options)
		opacity: var(#{$varPrefix}-opa, initial);
	}

	// order in at - flex css

	// orphans  TODO?

	// outline  TODO? or handled by border

	/*OverFlow*/
	&-ovf {
		// overflow: visible|hidden|clip|scroll|auto|initial|inherit; (value options)
		overflow: var(#{$varPrefix}-ovf, initial);
		// Othere overflow TODO?
	}
	/*Padding*/
	&-p {
		// padding: length|initial|inherit;
		padding: var(#{$varPrefix}-p, initial);
		// padding-block,  padding-block-end etc should be handled by padding
	}

	// page-break TODO?

	// paint-order TODO?

	// perspective on at-transform

	// place-content,place-items,place-self TODO? or should be handle on at - flex css

	/*Pointer Event*/
	&-ptr-ev {
		// pointer-events: auto|none;
		pointer-events: var(#{$varPrefix}-ptr-ev, initial);
	}

	// position on position group

	// quotes TODO?

	/*Resize*/
	&-resz {
		//resize: none|both|horizontal|vertical|initial|inherit;
		resize: var(#{$varPrefix}-resz, initial);
	}

	// right on position group

	// rotate used in transform

	// row-gap on flex

	// scale used in transform

	// scroll-behavior on html
	// scroll other properties TODO?

	/*Tab-size*/
	&-tab-sz {
		tab-size: var(#{$varPrefix}-tab-sz, initial);
	}

	// top in position group

	/*Transform*/
	&-tf {
		// perspective: length|none;
		perspective: var(#{$varPrefix}-ppv, initial);

		// perspective-origin: x-axis y-axis|initial|inherit;
		perspective-origin: var(#{$varPrefix}-ppv-org, initial);

		// transform: none|transform-functions|initial|inherit;
		transform: var(#{$varPrefix}-tf, initial);

		// transform-origin: x-axis y-axis z-axis|initial|inherit;
		transform-origin: var(#{$varPrefix}-tf-org, initial);

		// transform-style: flat|preserve-3d|initial|inherit;
		transform-style: var(#{$varPrefix}-tf-sty, initial);
	}

	// translate in transform

	// user-select TODO?

	// vertical-align TODO? or using flex

	// table-layout on table

	/*Transition*/
	&-trs {
		// transition: property duration timing-function delay|initial|inherit;
		transition: var(#{$varPrefix}-trs, initial);
	}
	/*Visibility*/
	&-vis {
		// visibility: visible|hidden|collapse|initial|inherit;
		visibility: var(#{$varPrefix}-vis, initial);
	}

	/*White Space*/
	&-white-sp {
		//white-space: normal|nowrap|pre|pre-line|pre-wrap|initial|inherit;
		white-space: var(#{$varPrefix}-white-sp, initial);
	}

	// width: auto|length|initial|inherit; handle by max-width

	/*Word*/
	&-wrd {
		&-brk {
			// word-break: normal|break-all|keep-all|break-word|initial|inherit;
			word-break: var(#{$varPrefix}-wrd-brk, initial);
		}

		&-spc {
			// word-spacing: normal|length|initial|inherit;
			word-spacing: var(#{$varPrefix}-wrd-spg, initial);
		}

		&-wrp {
			// word-wrap: normal|break-word|initial|inherit;
			word-wrap: var(#{$varPrefix}-wrd-wrp, initial);
		}
	}

	// writing-mode TODO?

	/*Z index*/
	&-z-idx {
		// z-index: auto|number|initial|inherit;
		z-index: var(#{$varPrefix}-z-idx, initial);
	}

	/*Block shape (Html element section top bottom shape)*/
	//wrapper
	&-blk-shp {
		#{$varPrefix}-pos: relative;

		> :not(#{$appPrefix}-shp):not(#{$appPrefix}-z-idx) {
			#{$varPrefix}-z-idx: 2;
			#{$varPrefix}-pos: relative;
			z-index: var(#{$varPrefix}-z-idx, initial);
			position: var(#{$varPrefix}-pos, initial);
		}
	}

	/*Block Shape Element*/
	&-shp {
		#{$varPrefix}-pos: absolute;
		#{$varPrefix}-w: 100%;
		#{$varPrefix}-l: 0;
		#{$varPrefix}-z-idx: 1;

		&-t {
			#{$varPrefix}-t: 0;
		}

		&-b {
			#{$varPrefix}-b: 0;
		}
	}

	/* Sticky columns*/
	&-stky {
		position: sticky !important;
		top: 0 !important;
		align-self: flex-start !important;
	}

	/*  If we want to wrap whole div by anchor and make it clickable or 
        If we want to wrap whole div by another element 
    */
	//wrapper of absolute div
	&-has-abs-wrp {
		position: relative;
	}
	/*Absolute Element*/
	&-abs-el {
		position: absolute;
		top: 0;
		width: 100%;
		height: 100%;
		bottom: 0;
	}

	/*Vertical Layout*/
	&-vrt {
		#{$varPrefix}-vrt-gap: var(#{$varPrefix}-gap, 15px);
		gap: var(#{$varPrefix}-vrt-gap);

		&-hdr {
			width: var(#{$varPrefix}-vrt-w, 20%);
		}

		&-conts {
			width: calc(
				(100% - var(#{$varPrefix}-vrt-w, 20%) - var(#{$varPrefix}-vrt-gap))
			);
		}
	}
}
