/* HTML elements can be broadly categorized into several types including:

Structural(Semantic) elements: define the structure of a web page and include elements such as <header>, <footer>, <nav>, <main>, <section>, <article>, and <aside>.

Text-level elements: define text-level content and include elements such as <p>, <h1>, <h2>, <h3>, <h4>, <h5>, <h6>, <a>, <em>, <strong>, <small>, <mark>, <del>, and <ins>.

Media elements: define media content such as images, videos, and audio, and include elements such as <img>, <video>, and <audio>.

Form elements: define form controls for user input and include elements such as <form>, <input>, <select>, <textarea>, <button>, <datalist>, <output>, and <label>.

List elements: define lists of content and include elements such as <ul>, <ol>, and <li>.

Table elements: define tabular data and include elements such as <table>, <thead>, <tbody>, <tfoot>, <tr>, <th>, and <td>.

Display type: elements that define the display type of content such as block-level elements and inline elements.
Block-level elements: These elements create a new block formatting context and occupy the full width available, automatically creating a new line before and after the element. Examples include <div>, <h1>, <p>, <ul>, <ol>, <table>, <form>, <header>, <footer>, etc.

Inline elements: These elements only take up as much width as necessary and do not create a new line before or after the element. Examples include <span>, <a>, <img>, <em>, <strong>, <small>, etc.


Interactivity: elements that provide interactive features such as buttons, checkboxes, radio buttons, and forms.

Phrasing content: elements that define phrasing content and the way it is rendered, such as <em>, <strong>, <small>, etc.

Metadata: elements that provide metadata about the document, such as <meta>, <title>, <link>, etc.
*/
//ClassesPrefix
$appPrefix: '.at';

//Root variable Prefix
$varPrefix: '--at';

* {
    margin    : var(#{$varPrefix}-m);
    padding   : var(#{$varPrefix}-p);
    box-sizing: var(#{$varPrefix}-box-szg);
}

html {
    scroll-behavior: var(#{$varPrefix}-scr-beh);
}

/* Text elements */
h1,
h2,
h3,
h4,
h5,
h6,
p,
a,
button,
code,
span,
li,
#{$appPrefix}-btn {
    // Font/Typography group
    // TODO? font has many other properties but I think we dont need them all;
    font-size      : var(#{$varPrefix}-fnt-sz);
    font-weight    : var(#{$varPrefix}-fnt-wt);
    font-family    : var(#{$varPrefix}-fnt-fam);
    font-style     : var(#{$varPrefix}-fnt-sty);
    text-transform : var(#{$varPrefix}-txt-tf);
    text-decoration: var(#{$varPrefix}-txt-dec);
    line-height    : var(#{$varPrefix}-ln-h);
    letter-spacing : var(#{$varPrefix}-ltr-sp);
    // color: color|initial|inherit;
    color          : var(#{$varPrefix}-cl);
}

/* Content grou */
table {
    // caption-side: top|bottom|initial|inherit;
    caption-side   : var(#{$varPrefix}-cpt-sd);
    // table-layout: auto|fixed|initial|inherit;
    table-layout   : var(#{$varPrefix}-tbl-lyt);
}

ul,
ol,
li {
    // list-style: list-style-type list-style-position list-style-image|initial|inherit;
    list-style: var(#{$varPrefix}-ls-sty);
}

#{$appPrefix} {
    &-acl {
        /* The accent-color property specifies the accent color for user-interface controls like: <input type="checkbox">, <input type="radio">, <input type="range"> and <progress>. */
        // accent-color: auto|color|initial|inherit;
        accent-color: var(#{$varPrefix}-acl);
    }

    //animation: name duration timing-function delay iteration-count direction fill-mode play-state;
    // Animation is handled by transform, transition, default animation
    // aspect-ratio TODO?
    // backdrop-filter TODO?
    // backface-visibility TODO?

    &-bg {
        &-cl {
            background-color: var(#{$varPrefix}-bg-cl);
        }

        &-img {
            background-image     : var(#{$varPrefix}-bg-img);
            background-position  : var(#{$varPrefix}-bg-pos);
            background-size      : var(#{$varPrefix}-bg-sz);
            background-repeat    : var(#{$varPrefix}-bg-rpt);
            background-origin    : var(#{$varPrefix}-bg-org);
            background-attachment: var(#{$varPrefix}-bg-atch);
            background-blend-mode: var(#{$varPrefix}-bg-blend-mode);
        }
    }

    // block-size TODO?

    /* Border has four different properties to, right, bottom, and left
    wich again have three properties color, style and width.
    Since individual properties color, width and style again support 4 values,
    We are managing all properties from these there values*/
    // TODO? border has many other properties but I think we dont need them all;

    &-bdr {
        // border-color: color|transparent|initial|inherit;
        border-color: var(#{$varPrefix}-bdr-cl);

        // border-width: medium|thin|thick|length|initial|inherit; (4sides)
        border-width: var(#{$varPrefix}-bdr-w);

        // border-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit; (4sides)
        border-style: var(#{$varPrefix}-bdr-sty);

        &-rad {
            // border-radius: 1-4 length|% / 1-4 length|%|initial|inherit; (4sides)
            border-radius: var(#{$varPrefix}-bdr-rad);
        }
    }

    &-btn {
        #{$varPrefix}-cur: pointer;
        cursor           : var(#{$varPrefix}-cur);
        color            : var(#{$varPrefix}-cl);
        background-color : var(#{$varPrefix}-bg-cl);
        font-size        : var(#{$varPrefix}-fnt-sz);
        border-color     : var(#{$varPrefix}-bdr-cl);
        border-width     : var(#{$varPrefix}-bdr-w);
        border-style     : var(#{$varPrefix}-bdr-sty);
        padding          : var(#{$varPrefix}-p);
    }

    &-pos {
        // bottom: auto|length|initial|inherit; (Position group)
        bottom     : var(#{$varPrefix}-b);
        // position: static|absolute|fixed|relative|sticky|initial|inherit;
        position   : var(#{$varPrefix}-pos);
        // top: auto|length|initial|inherit;
        top        : var(#{$varPrefix}-t);
        // right: auto|length|initial|inherit;
        right      : var(#{$varPrefix}-r);
        // left: auto|length|initial|inherit;
        left       : var(#{$varPrefix}-l);
    }

    // box-decoration-break TODO?

    &-box {
        &-refl {
            // box-reflect
            //Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user.
            box-reflect: var(#{$varPrefix}-box-refl);
        }

        &-sdw {
            // box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;
            box-shadow: var(#{$varPrefix}-box-sdw);
        }

        &-szg {
            // box-sizing: content-box|border-box|initial|inherit;
            box-sizing: var(#{$varPrefix}-box-szg);
        }
    }

    // break-after,break-before,break-inside TODO?

    &-ct {
        &-cl {
            /* Set the color of the cursor in input elements:*/
            // caret-color: auto|color|initial|inherit;
            caret-color: #{$varPrefix}-ct-cl;
        }
    }

    //clear,clip,clip-path TODO?

    &-cl {
        // color: color|initial|inherit;
        color: var(#{$varPrefix}-cl);
    }

    // column-count,column-fill,column-gap, column-rule, column-rule-color, column-rule-style, column-rule-width, column-span, column-width, columns TODO?
    // content TODO?
    // counter-increment, counter-reset TODO?
    // content TODO?

    &-cur {
        // cursor: value;
        cursor: var(#{$varPrefix}-cur);
    }

    &-dir {
        // direction: ltr|rtl|initial|inherit;
        direction: var(#{$varPrefix}-dir);
    }

    // display handle by at - flex css

    // empty-cells TODO?

    &-flt {
        // filter: none | blur() | brightness() | contrast() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia() | url();
        filter: var(#{$varPrefix}-flt);
    }

    // flex related css handled by at - flex css. flex, flex-basis, flex-direction, flex-flow, flex-grow, flex-shrink, flex-wrap

    // float TODO?

    &-typ {

        // Font/Typography group
        // TODO? font has many other properties but I think we dont need them all;
        font-size      : var(#{$varPrefix}-fnt-sz);
        font-weight    : var(#{$varPrefix}-fnt-wt);
        font-family    : var(#{$varPrefix}-fnt-fam);
        font-style     : var(#{$varPrefix}-fnt-sty);
        text-transform : var(#{$varPrefix}-txt-tf);
        text-decoration: var(#{$varPrefix}-txt-dec);
        line-height    : var(#{$varPrefix}-ln-h);
        letter-spacing : var(#{$varPrefix}-ltr-sp);
    }

    // fap in flex

    // Not using any other grid properties, we use flex from by at-flex css

    // height: auto|length|initial|inherit; handle by min-height

    // hyphens: none|manual|auto|initial|inherit; TODO?

    // image-rendering: auto|smooth|high-quality|crisp-edges|pixelated|initial|inherit; TODO?

    // inline-size: auto|value|initial|inherit; TODO?

    // inset,inset-block,inset-block-end, inset-block-start othere inset properties TODO?

    // isolation: auto|isolate|initial|inherit; TODO?

    // justify-content,justify-items and justify-self used by at - flex css

    // left already used on position group

    // letter-spacing/line-height already used on font/typography group

    // list-style used on ul, ol,li

    &-msk {
        mask-image   : var(#{$varPrefix}-msk-img);
        mask-mode    : var(#{$varPrefix}-msk-mode);
        mask-origin  : var(#{$varPrefix}-msk-org);
        mask-position: var(#{$varPrefix}-msk-pos);
        mask-repeat  : var(#{$varPrefix}-msk-rpt);
        mask-size    : var(#{$varPrefix}-msk-sz);
    }

    // max-block-size TODO?

    &-m {
        // margin: length|auto|initial|inherit;
        margin: var(#{$varPrefix}-m);

        //  margin-block, margin-block-end, margin-block-start, margin-top all should be handled by margin.

        // mask related on at-mask class
    }

    &-max {
        &-h {
            // max-height: none|length|initial|inherit;
            max-height: var(#{$varPrefix}-max-h);
        }

        &-w {
            // max-width: none|length|initial|inherit;
            max-width: var(#{$varPrefix}-max-w);
        }
    }

    &-min {
        &-h {
            // min-height: length|initial|inherit;
            min-height: var(#{$varPrefix}-min-h);
        }

        &-w {
            // min-width: length|initial|inherit;
            min-width: var(#{$varPrefix}-min-w);
        }
    }

    &-h {
        // height: length|initial|inherit;
        height: var(#{$varPrefix}-h);
    }

    &-w {
        // width: length|initial|inherit;
        width: var(#{$varPrefix}-w);
    }

    //  max-inline-size: 60px; TODO?

    // min-block-size, min-inline-size TODO?
    // mix-blend-mode: normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|difference|exclusion|hue|saturation|color|luminosity;
    // mix-blend-mode: var(#{$varPrefix}-mix-blend-mode);

    // object-fit,object-position  TODO?

    // offser,offset-anchor and other offect  TODO?

    &-opa {
        // opacity: number|initial|inherit;
        opacity: var(#{$varPrefix}-opa);
    }

    // order in at - flex css

    // orphans  TODO?

    // outline  TODO? or handled by border

    &-ovf {
        // overflow: visible|hidden|clip|scroll|auto|initial|inherit;
        overflow: var(#{$varPrefix}-ovf);
        // Othere overflow TODO?
    }

    &-p {
        // padding: length|initial|inherit;
        padding: var(#{$varPrefix}-p);
        // padding-block,  padding-block-end etc should be handled by padding
    }

    // page-break TODO?

    // paint-order TODO?

    // perspective on at-transform

    // place-content,place-items,place-self TODO? or should be handle on at - flex css

    &-ptr-ev {
        // pointer-events: auto|none;
        pointer-events: var(#{$varPrefix}-ptr-ev);
    }

    // position on position group

    // quotes TODO?

    // resize TODO?

    // right on position group

    // rotate used in transform

    // row-gap on flex

    // scale used in transform

    // scroll-behavior on html
    // scroll other properties TODO?

    // tab-size TODO?

    &-txt {
        &-al {
            // text-align: left|right|center|justify|initial|inherit;
            text-align: var(#{$varPrefix}-txt-al);
        }

        // text-align-last TODO?

        // text-decoration on font/typography group
        // text-decoration-color,text-decoration-line,text-decoration-style,text-decoration-thickness TODO?

        // text-indent TODO?
        // text-justify TODO?
        //  text-orientation TODO?
        //  text-overflow TODO?

        &-sdw {
            // text-shadow: h-shadow v-shadow blur-radius color|none|initial|inherit;
            text-shadow: var(#{$varPrefix}-txt-sdw);
        }

        // text-transform in typography group
    }

    // top in position group

    &-tf {
        // perspective: length|none;
        perspective: var(#{$varPrefix}-ppv);

        // perspective-origin: x-axis y-axis|initial|inherit;
        perspective-origin: var(#{$varPrefix}-ppv-org);

        // transform: none|transform-functions|initial|inherit;
        transform: var(#{$varPrefix}-tf);

        // transform-origin: x-axis y-axis z-axis|initial|inherit;
        transform-origin: var(#{$varPrefix}-tf-org);

        // transform-style: flat|preserve-3d|initial|inherit;
        transform-style: var(#{$varPrefix}-tf-sty);
    }

    // translate in transform

    // user-select TODO?

    // vertical-align TODO? or using flex

    // table-layout on table
    &-trs {
        // transition: property duration timing-function delay|initial|inherit;
        transition: var(#{$varPrefix}-trs);
    }

    &-vis {
        // visibility: visible|hidden|collapse|initial|inherit;
        visibility: var(#{$varPrefix}-vis);
    }

    // white-space TODO?

    // width: auto|length|initial|inherit; handle by max-width

    &-wrd {
        &-brk {
            // word-break: normal|break-all|keep-all|break-word|initial|inherit;
            word-break: var(#{$varPrefix}-wrd-brk);
        }

        &-spc {
            // word-spacing: normal|length|initial|inherit;
            word-spacing: var(#{$varPrefix}-wrd-spg);
        }

        &-wrp {
            // word-wrap: normal|break-word|initial|inherit;
            word-wrap: var(#{$varPrefix}-wrd-wrp);
        }
    }

    // writing-mode TODO?

    &-z-idx {
        // z-index: auto|number|initial|inherit;
        z-index: var(#{$varPrefix}-z-idx);
    }
}